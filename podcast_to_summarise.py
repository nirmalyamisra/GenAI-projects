# -*- coding: utf-8 -*-
"""Podcast_to_summarise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gAMy08D_FG4bbPOHmwedV1CtvNRbucY2
"""

!pip install yt-dlp
!pip install moviepy
!pip install openai-whisper transformers torch
!pip install google-generativeai

# Import necessary libraries
import os
import google.generativeai as genai
import whisper
import yt_dlp
from google.colab import userdata # To access Colab secrets
import IPython.display as ipd    # To play audio in the notebook

# --- --- --- --- --- ---
#      CONFIGURATION
# --- --- --- --- --- ---
try:
    # Access the API key you stored in Colab Secrets
    api_key = userdata.get('GOOGLE_API_KEY')
    genai.configure(api_key=api_key)
    print("‚úÖ Google API Key configured successfully.")
except Exception as e:
    print(f"‚ùå Configuration error: Could not find or access the GOOGLE_API_KEY secret. Please ensure it's set correctly in the Colab Secrets manager. Error: {e}")


# --- --- --- --- --- ---
#      HELPER FUNCTIONS
# --- --- --- --- --- ---
def download_audio(youtube_url):
    """
    Downloads audio from a YouTube URL and returns the filename.
    """
    audio_filename = "downloaded_audio.mp3"
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': 'downloaded_audio',
        'quiet': True,
    }

    print(f"\n‚¨áÔ∏è  Downloading audio from {youtube_url}...")
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([youtube_url])
        print("‚úÖ Audio downloaded successfully.")
        return audio_filename
    except Exception as e:
        print(f"‚ùå Error downloading audio: {e}")
        return None

def transcribe_audio(audio_path, model_size="base"):
    """
    Transcribes an audio file using Whisper and formats the output.
    """
    if not os.path.exists(audio_path):
        print(f"‚ùå Audio file not found at {audio_path}")
        return None

    print(f"üß† Transcribing audio with Whisper '{model_size}' model...")
    try:
        model = whisper.load_model(model_size)
        result = model.transcribe(audio_path, fp16=False) # fp16=False can improve stability
        print("‚úÖ Transcription complete.")

        # Format the text to add a newline after every full stop
        raw_text = result['text']
        formatted_text = raw_text.replace('. ', '.\n')

        return formatted_text
    except Exception as e:
        print(f"‚ùå Error during transcription: {e}")
        return None

def summarize_text_with_gemini(text, max_summary_length=150):
    """
    Summarizes a long text using Gemini and formats the output.
    """
    print("‚úçÔ∏è  Summarizing with Google Gemini...")
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    prompt = f"Summarize the following text in approximately {max_summary_length} words. Make it clear, concise, and easy to understand:\n\n---\n\n{text}"

    try:
        response = model.generate_content(prompt)
        print("‚úÖ Summarization complete.")

        # Format the summary to add a newline after every full stop
        raw_summary = response.text
        formatted_summary = raw_summary.replace('. ', '.\n')

        return formatted_summary
    except Exception as e:
        print(f"‚ùå Error during summarization with Gemini: {e}")
        return None

# --- --- --- --- --- ---
#      MAIN SCRIPT
# --- --- --- --- --- ---
if __name__ == "__main__":
    # URL of the "Tryst with Destiny" speech by Jawaharlal Nehru
    video_url = "https://youtu.be/6r8_HlYNwDY?si=55HFSc2QPW-bUr6E"

    # 1. Download the audio
    audio_file = download_audio(video_url)

    if audio_file:
        # 2. Play the downloaded audio
        print(f"\n‚ñ∂Ô∏è  Playing downloaded audio: {audio_file}")
        display(ipd.Audio(audio_file))

        # 3. Transcribe the audio
        transcript = transcribe_audio(audio_file)

        if transcript:
            # Optional: Print the full, formatted transcript
            print("\n" + "="*50)
            print("üìú FULL TRANSCRIPT üìú")
            print("="*50)
            print(transcript)

            # 4. Summarize the transcript
            summary = summarize_text_with_gemini(transcript)

            if summary:
                print("\n" + "="*50)
                print("‚ú® SUMMARY OF 'TRYST WITH DESTINY' ‚ú®")
                print("="*50)
                print(summary)

        # 5. Clean up the downloaded audio file
        print("\nüßπ Cleaning up temporary files...")
        if os.path.exists(audio_file):
            os.remove(audio_file)
        print("‚úÖ Done.")